<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>博客</title>
    <link>http://lovzgump.github.io/</link>
    <description>Recent content on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>utf-8</language>
    <lastBuildDate>Tue, 02 Jul 2019 10:13:18 +0800</lastBuildDate>
    
	<atom:link href="http://lovzgump.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FirstBlog</title>
      <link>http://lovzgump.github.io/post/blog/</link>
      <pubDate>Tue, 02 Jul 2019 10:13:18 +0800</pubDate>
      
      <guid>http://lovzgump.github.io/post/blog/</guid>
      <description> 事务  事务：单个逻辑工作单元执行的一系列操作 事务的属性：ACID
 Atomicity原子性：单个事务内的一系列操作，要么全都执行，要么都不执行 Consistency一致性：事务在完成时，必须使所有的数据都保持一致状态  一致性状态：数据库只包含成功事务提交的结果 不一致状态：数据库中包含失败事务的结果  Isolation隔离性：由并发事务所作的修改必须与任何其它并发事务所作的修改隔离，即每个事务都不会察觉到系统中其他事务在并发执行 Durability持久性：事务完成之后，它对于系统的影响是永久性的。该修改即使出现致命的系统故障也将一直保持
并发控制  事务并发执行可能带来的问题，可能会存取和存储不正确的数据，破坏事务的隔离性和数据库的一致性
 使并发事务的执行效果等同于串行执行的调度叫做可串行化；可串行性是并发事务正确性的唯一准则
 并发操作的潜在不一致性：
 丢失修改：事务1与事务2从数据库中读入同一数据并修改，事务2的提交结果破坏了事务1提交的结果，导致事务1的修改丢失 读“脏”数据：事务1修改某一数据，并将其写回磁盘。事务2读取同一数据后，事务1由于某些原因被撤销，这时事务1已修改过的数据恢复原值，事务2读到的数据就与数据库中的数据不一致，是不正确的数据，称为“脏”数据 不可重复读：是指事务1读取数据后，事务2执行更新操作，事务1无法再现前一次读取结果  封锁：事务T在对某个数据对象操作之前，先向系统发出请求，对其加锁；是实现并发控制的一个非常重要的技术
 1级封锁协议：事务T在修改数据R之前必须先对其加X锁，直到事务结束才释放
 可防止丢失修改 没有限制读数据时加锁，所以不能保证可重复读和不读“脏”数据  2级封锁协议：1级封锁协议+事务T在读取数据R前必须先加S锁，读完后即可释放S锁
 可防止丢失修改和读“脏”数据 由于读完数据后即可释放S锁，所以不能保证可重复读  3级封锁协议：1级封锁协议+事务T在读取数据R之前必须先对其加S锁，直到事务结束时才释放
 封锁粒度：封锁对象的大小；多粒度封锁是指在一个系统中同时支持多种封锁粒度供不同的事务选择
 对一个结点加锁意味着这个结点的所有后裔结点加以同样类型的锁
 显示封锁：直接加到数据对象上的封锁 隐式封锁：由于其上级结点加锁而使该数据对象加上了锁 显式封锁和隐式封锁效果一样  意向锁：对任一结点加锁，必须先对它的上层结点加意向锁；用于提高对某个数据对象加锁时系统的检查效率
 申请封锁时应该按自上而下的次序进行 释放封锁时则应该按自下而上的次序进行  事务是恢复和并发控制的基本单位
故障恢复 事务故障：某个事务在运行过程中由于种种原因未运行至正常终止点就夭折了
 撤销undo事务 强行回滚该事务 清除该事务对数据库的所有修改，使得这个事务像根本没有启动过一样  系统故障：内存中数据库缓冲区的信息全部丢失
 清除尚未完成的事务对数据库的所有修改：系统重新启动时，恢复程序要强行撤销undo所有未完成事务 将缓冲区中已完成事务提交的结果写入数据库：系统重新启动时，恢复程序需要重做redo所有已提交的事务  介质故障
 日志文件：用来记录事务对数据库的更新操作的文件
  </description>
    </item>
    
  </channel>
</rss>